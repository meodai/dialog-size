/**
 * dialog-size - Painless CSS sizes
 * @version v1.7.0
 * (c) 2019 meodai <meodai@gmail.com> (https://github.com/meodai/)
 * @link https://github.com/meodai/dialog-size#readme
 * @license MIT
 */
 /// default sizes
/// if the argument $sizes of the size() mixin is empty. This map will be used.
$dialog-sizes:
  (0.2rem tiny)
  0.5rem
  (0.75rem small)
  0.8rem
  (1rem large isBase)
  (1.2rem x-large)
  (1.5rem xx-large)
  3.5rem
  (5rem huge)
  10rem
  !default;

/// strings for smaller and bigger keywords
$dialog-keyowrd-bigger: bigger !default;
$dialog-keyowrd-smaller: smaller !default;
$dialog-keyowrd-current: current !default;

$dialog-keyowrd-bigger-than: unquote('#{$dialog-keyowrd-bigger} than ') !default;
$dialog-keyowrd-smaller-than: unquote('#{$dialog-keyowrd-smaller} than ') !default;

/// Globas for internal use
$dialog-last-sizes: null;
$dialog-last-size: null;

/// Gets closes value in a list
/// @param {Number} $val - reference value
/// @param {List} $list - lookup list
/// @return {Number} Closest value in list
@function closest ($val, $list) {
  $current: 0;
  @each $listVal in $list {
    @if ( abs($val - $listVal) < abs($val - $current) ) {
      $current: $listVal;
    }
  }
  @return $current;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

/// Returns closest size within a map
/// @param {String|Size or Number} $size - the size intended size
/// @param {Map} $sizes - A map of possible sizes. (eg. $dialog-sizes)
/// @return {Size} Closest size ins $sizes
///
/// Usage:
///
/// # Relative
/// size(-1) => 0.2rem
/// size(0) => 1rem
/// size(1) => 10rem
///
/// # Name
/// size(large) => 1rem
/// size(huge) => 5rem
///
/// # Value
/// size(3.1rem) => 3.5rem
///
/// # Custom sizes $map
/// size(0, $sizes: 0.2rem 0.5rem (1.2rem isBase) 2.5rem 3rem 10rem) => 1.2rem
@function size($size, $sizes: $dialog-sizes) {
  $closest: null;
  $baseIndex: 1;
  $sizesOnly: ();
  $names: ();
  $baseIndex: null;

  $isSmaller: false;
  $isBigger: false;
  $isCurrent: false;
  $isRelativeTo: false;
  $isRelative: false;

  @if type-of($size) == string {
    $isSmaller: str-index($size, $dialog-keyowrd-smaller);
    $isBigger: str-index($size, $dialog-keyowrd-bigger);
    $isCurrent: str-index($size, $dialog-keyowrd-current);
    $isRelativeTo: str-index($size, $dialog-keyowrd-bigger-than) or str-index($size, $dialog-keyowrd-smaller-than);
    $isRelative: ($isSmaller or $isBigger or $isCurrent);
  }

  @if length($sizes) < 3 {
    @error '$sizes needs to be a set of min 3 values'
  }

  /// extract names and $baseIndex from $sizes
  @for $index from 1 through length($sizes) {
    $currentSize: nth($sizes, ($index *1)); // OrT: fixes https://github.com/sass/node-sass/issues/1904
    @each $val in $currentSize {
      @if (type-of($val) == 'number') {
        $sizesOnly: join($sizesOnly, $val);
      } @else if $val == 'isBase' {
        @if $baseIndex != null {
          @error 'isBase can be in $sizes only once';
        }
        $baseIndex: ($index *1); // OrT: fixes https://github.com/sass/node-sass/issues/1904
      } @else {
        $names: map-merge($names, ($val: ($index *1))); // OrT: fixes https://github.com/sass/node-sass/issues/1904
      }
    }
  }

  @if $isRelative and not $isRelativeTo and not $dialog-last-sizes {
    @error 'the keywords "#{$dialog-keyowrd-bigger}", "#{$dialog-keyowrd-smaller}" and "#{$dialog-keyowrd-current}" can only be used after a non relative size() call'
  } @else if $isRelative and not $isRelativeTo {
    $size: $dialog-last-size;
  }

  @if $baseIndex == null {
    @error 'you need to set isBase on one of your values in $sizes';
  }
  @if $isRelativeTo {
    $size: str-replace(str-replace($size, $dialog-keyowrd-smaller-than), $dialog-keyowrd-bigger-than);
  }

  @if not map-has-key($names, $size) and not (type-of($size) == 'number') {
    @error '#{$size} is not set in $sizes';
  }

  @if map-has-key($names, $size) {
    /// $size is a name
    $closest: nth($sizesOnly, map-get($names, $size));
  } @else if unitless($size) {
    /// $size is a relative value
    @if (not ($size <= 1) or not ($size >= -1) ) {
        @error 'if $size is unitless it must be a value between -1 and 1';
    } @else {
      /// transform range from [-1,1] to [0,1]
      $min: $baseIndex;
      $max: 1;

      @if ($size >= 0) {
        $max: length($sizesOnly);
      }

      $absuluteIndex: abs($size) * ($max - $min) + $min;
      $closest: nth($sizesOnly, round($absuluteIndex));
    }
  } @else {
    /// if $size is a value
    $closest: closest($size, $sizesOnly);
    @if ( $closest != $size ) {
      @warn '#{$size} is not contained in $sizes the closest value: #{$closest} will be used';
    }
  }

  @if $isRelative {
    $closestIndex: index($sizesOnly, $closest);
    $nextIndex: null;
    $direction: null;

    @if not $isRelativeTo {
      $sizes: $dialog-last-sizes;
    }
    @if $isBigger {
      $nextIndex: $closestIndex + 1;
      $direction: 'bigger';
    } @else if $isCurrent {
      $nextIndex: $closestIndex;
    } @else {
      $nextIndex: $closestIndex - 1;
      $direction: 'smaller';
    }
    @if ($nextIndex < 1) or ($nextIndex > length($sizes)) {
      @warn 'there is nothing #{$direction} than #{$closest} in #{$sizes}';
      $nextIndex: $closestIndex;
    }
    @return size(nth($sizesOnly, $nextIndex), $sizes: $sizes);
  }

  /// saves the current output for future 'relative' keyword usage
  $dialog-last-sizes: $sizes !global;
  $dialog-last-size: $closest !global;

  @return $closest;
}


/// Transforms a imported map from a JSON to a list in the style of $dialog-sizes
/// @param {map} $sizes - Map imported from NPM json-sass importer
/// @return {list} - Updated string

/// like: @import '../../design/sizes.json' =>
// {
//   "sizes": [
//     {
//       "value": "0.11rem",
//       "names": ["line"]
//     },
//     {
//       "value": "0.22rem",
//       "names": ["tiny", "header-stack"]
//     },
//     {
//       "value": "0.44rem",
//       "names": ["base", "small", "grid"]
//     }
//   ]
// }

@function toDialogSizeList($sizes) {
  /// creates an empty list
  $ds: ();
  @each $size in $sizes {
      $val: map-get($size, 'value');
      @if (map-has-key($size, 'names')) {
          $names: map-get($size, 'names');
          @if (type-of($names) != list) {
              $names: ($names,);
          }
          $val: join($val, $names, space);
      }
      @if (map-has-key($size, 'isBase')) {
          $val: join($val, (isBase,), space);
      }
      $ds: append($ds, $val, 'comma');
  };
  @return $ds;
}
